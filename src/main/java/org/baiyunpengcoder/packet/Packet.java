package org.baiyunpengcoder.packet;

/**
 *
 * QUIC 有特殊数据包和普通数据包。  有两种类型
 *
 *     特殊包：版本协商包 、公共重置
 *     常规数据包： 帧数据包、FEC数据包
 *     所有 QUIC 数据包的大小都应适合路径的 MTU 以避免 IP 碎片。  路径 MTU 发现是一项工作进度，
 *     当前的 QUIC 实现使用 1350 字节
 *     IPv6 的最大 QUIC 数据包大小，IPv4 为 1370。
 *
 *
 *             0        1        2        3        4            8
 *    +--------+--------+--------+--------+--------+---    ---+
 *    | Public |    Connection ID (0, 8, 32, or 64)    ...    | ->
 *    |Flags(8)|      (variable length)                       |
 *    +--------+--------+--------+--------+--------+---    ---+
 *
 *         9       10       11        12
 *    +--------+--------+--------+--------+
 *    |      QUIC Version (32)            | ->
 *    |         (optional)                |
 *    +--------+--------+--------+--------+
 *
 *        13      14       15        16        17       18
 *    +--------+--------+--------+--------+--------+--------+
 *    |         Packet Number (8, 16, 32, or 48)            |
 *    |                         (variable length)           |
 *    +--------+--------+--------+--------+--------+--------+
 *
 *    o  Public Flags:
 *
 *       *  0x01 = PUBLIC_FLAG_VERSION.  这个标志的解释取决于数据包是由服务器发送还是由客户.
 *          当客户端发送时，设置它表示标头包含一个 QUIC Version (see below).  这个位必须
 *           由客户端在所有数据包中设置，直到来自客户端的确认服务器到达同意提议的版本被接收
 *           客户端。  服务器通过以下方式表示同意一个版本发送数据包而不设置该位。  当该位被设置时
 *           由服务器端，该数据包是一个版本协商数据包。
 *           稍后将更详细地描述版本协商。
 *
 *       *  0x02 = PUBLIC_FLAG_RESET.  设置以指示该数据包是一个公共重置数据包。
 *
 *       *  0x0C 处的两位表示连接 ID 的大小，即存在于数据包中。  这些位必须全部设置为 0x0C
 *           数据包直到协商为给定的不同值方向（例如，客户端可以请求更少的字节显示连接 ID）。
 *
 *          +  0x0C 表示存在一个 8 字节的连接 ID
 *          +  0x08 表示存在一个 4 字节的连接 ID
 *          +  0x04 表示使用 1 字节的连接 ID
 *          +  0x00 表示省略Connection ID
 *
 *       *  0x30 的两位表示低字节的数量 每个数据包中存在的数据包编号。  位是仅用于帧数据包。
 *          对于公共重置和版本 ,协商包（由服务器发送）没有包号，这些位不使用，必须设置为 0。
 *
 *           在这个 2 位掩码内
 *
 *          +  0x30 表示存在 6 个字节的包号
 *          +  0x20 表示存在 4 个字节的包号
 *          +  0x10 表示存在 2 个字节的包号
 *          +  0x00 表示存在 1 个字节的包号
 *
 *       *  0x40 保留用于多路径使用。
 *
 *       *  0x80 当前未使用，必须设置为 0。
 *     o  Connection ID: 这是客户端选择的无符号64位统计随机数，是连接的标识符。
 *       因为QUIC连接设计为即使客户端漫游也能保持建立状态, IP 4元组（源IP、源端口、目标IP、目标端口）
 *       可能不足以识别连接。对于每个传输方向，当较少的唯一性足以识别连接时，可以协商截断传输的连接ID长度.
 *
 *    o  QUIC Version: 表示QUIC协议版本的32位不透明标记。仅当公共标志包含
 *       FLAG_VERSION (i.e public_flags & FLAG_VERSION !=0).
 *      客户端可以设置此标志，并包括 EXACTLY 一个建议版本    , 以及包括任意数据（符合该版本）。
 *      当客户端建议的版本不受支持时，服务器可以设置此标志，然后可以提供可接受版本的列表（0或更多） ,
 *      但 MUST不包括版本后的任何数据。.
 *       最近实验版本中的版本值示例包括“Q025”，对应于包含“Q”的字节9，包含“0”的字节10等
 *       [参见本文件末尾列出的各种版本的更改列表。]
 *
 *    o  Packet Number: 数据包编号的低位8、16、32或48位，基于
 *          FLAG_?BYTE_SEQUENCE_NUMBER 在公共标志中设置标志.
 *           发送方为每个常规数据包（与特殊的公共重置和版本协商数据包相反）分配一个数据包编号。
 *           端点发送的第一个数据包的数据包编号应为1，
 *           每个后续数据包的数据包编号应大于前一个数据包的数据包编号。
 *           分组号的低64位用作加密nonce的一部分；因此,
 *           QUIC端点不得发送数据包编号不能用64位表示的数据包.
 *           如果QUIC端点传输数据包编号为（2^64-1）的数据包，则该数据包必须包含一个
 *            CONNECTION_CLOSE frame 错误代码为 QUIC_SEQUENCE_NUMBER_LIMIT_REACHED,
 *          并且端点不得传输任何其他数据包。最多传输数据包编号的低位48位。为了使接收机能够毫不含糊地重建分组号，
 *          QUIC端点不得发送分组号大于（2^（bitlength-2））的分组，该分组号大于接收机已知已发送确认的最大分组号。
 *          因此，传输中的数据包不得超过（2^46）个。
 *          应推断任何截断的数据包编号的值最接近传输最初包含截断数据包编号的数据包的端点的最大已知数据包编号。
 *          包编号的传输部分与推断值的最低位匹配。 .
 *
 *
 *          Check the public flags in public header
 *                  |
 *                  |
 *                  V
 *            +--------------+
 *            | Public Reset |    YES
 *            | flag set?    |---------------> Public Reset Packet
 *            +--------------+
 *                  |
 *                  | NO
 *                  V
 *            +------------+          +-------------+
 *            | Version    |   YES    | Packet sent |  YES
 *            | flag set?  |--------->| by server?  |--------> Version Negotiation
 *            +------------+          +-------------+               Packet
 *                  |                        |
 *                  | NO                     | NO
 *                  V                        V
 *            Regular Packet         Regular Packet with
 *                               QUIC Version present in header
 *
 *
 *
 *
 * @author baiyunpeng
 * @date 2022/6/17 11:03
 **/
public interface Packet {

    /**
     * 获取帧类型
     * @return
     */
    byte getType();

}
